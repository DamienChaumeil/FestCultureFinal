using Android.Util;
using AppGestCulture.Models;
using AppGestCulture.Data;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using static Android.Net.Wifi.WifiEnterpriseConfig;
using static Android.Provider.CalendarContract;
using Android.Accounts;

namespace AppGestCulture.ViewModels
{
    public partial class ExploitationEditViewModel
    {
        public Exploitation Exploitation { get; private set; }

        private static Database database = null;
        public ICommand btnUpdateExploitation { get; set; }
        public ICommand btnRemoveExploitation { get; set; }

        private INavigation navigation;

        public ExploitationEditViewModel(Exploitation exploitation, INavigation _navigation)
        {
            navigation = _navigation;
            btnUpdateExploitation = new Command(async () => updateExploitation());
            btnRemoveExploitation = new Command(async () => removeExploitation());

            Exploitation = exploitation;
        }

        private async Task updateExploitation()
        {
            await GetConnection().UpdateExploitation(Exploitation);
            var newExploitation = await GetConnection().GetExploitation(Exploitation.Id_exploi);
            MessagingCenter.Send(this, "UpdateExploitation", newExploitation);

            await customPopAsync(2);
        }
        private async Task removeExploitation()
        {
            if (await App.Current.MainPage.DisplayAlert("Warning", $"Are you sure you want to delete {Exploitation.Code_exploi}?", "Yes", "No"))
            {
                MessagingCenter.Send(this, "DeleteExploitation", Exploitation);
                await GetConnection().DeleteExploitation(Exploitation);
                await customPopAsync(2);
            }
        }
        private async Task customPopAsync(int counter)
        {
            for (var i = 1; i < counter; i++)
            {
                Navigation.RemovePage(Navigation.NavigationStack[Navigation.NavigationStack.Count - 2]);
            }
            await Navigation.PopAsync();
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public INavigation Navigation
        {
            get { return navigation; }
            set { navigation = value; }
        }

        private static Database GetConnection()
        {
            if (database == null)
                database = new Database();
            return database;
        }
    }
}
