using AppGestCulture.Models;
using AppGestCulture.Data;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using static Android.Net.Wifi.WifiEnterpriseConfig;
using static Android.Provider.CalendarContract;
using AppGestCulture.Views;

namespace AppGestCulture.ViewModels
{
    public partial class ExploitationDetailsViewModel
    {
        public ObservableCollection<Parcelle> obParcelle { get; private set; } = new ObservableCollection<Parcelle>();

        private Parcelle _selectedParcelle;
        public Exploitation Exploitation { get; set; }

        private static Database database = null;
        public ICommand btnAddParcelle { get; set; }    
        public ICommand btnUpdateExploitation { get; set; }
        public ICommand SelectParcelleCommand { get; private set; }

        private INavigation navigation;
        private bool _isDataLoaded;
        public Parcelle selectedParcelle
        {
            get => _selectedParcelle;
            set
            {
                _selectedParcelle = value;
                OnPropertyChanged();
            }
        }

        public ExploitationDetailsViewModel(Exploitation exploitation, INavigation _navigation)
        {
            navigation = _navigation;
            btnAddParcelle = new Command(async () => addParcelle());
            btnUpdateExploitation = new Command(async () => updateExploitation());
            SelectParcelleCommand = new Command<Parcelle>(async e => await SelectParcelle(e));

            MessagingCenter.Subscribe<ParcelleSaisieViewModel, Parcelle>(this, "AddParcelle", OnParcelleAdd);
            MessagingCenter.Subscribe<ParcelleEditViewModel, Parcelle>(this, "UpdateParcelle", OnParcelleUpdate);
            MessagingCenter.Subscribe<ParcelleEditViewModel, Parcelle>(this, "DeleteParcelle", OnParcelleDelete);

            Exploitation = exploitation;
        }

        private async Task addParcelle()
        {
            await Navigation.PushAsync(new ParcelleSaisieView(Exploitation));
        }
        private async Task updateExploitation()
        {
            await Navigation.PushAsync(new ExploitationEditView(Exploitation));
        }
        public async Task UpdateParcelleAsync()
        {
            if (_isDataLoaded)
                return;

            _isDataLoaded = true;
            var parcelles = await GetConnection().GetAllParcelleById(Exploitation);

            foreach (var parcelle in parcelles)
                obParcelle.Add(parcelle);

            OnPropertyChanged();
        }
        private async Task SelectParcelle(Parcelle parcelle)
        {
            if (parcelle == null)
                return;

            _selectedParcelle = null;
            var espece = await GetConnection().GetEspece(parcelle.Id_espece);
            await Navigation.PushAsync(new ParcelleDetailsView(parcelle, espece));
        }
        private async void OnParcelleAdd(ParcelleSaisieViewModel source, Parcelle parcelle)
        {
            Exploitation.Parcelles.Add(parcelle);
            GetConnection().UpdateExploitation(Exploitation);
            OnPropertyChanged();
        }
        private void OnParcelleUpdate(ParcelleEditViewModel source, Parcelle newParcelle)
        {
            var parcelle = Exploitation.Parcelles.Where(X => X.Id_parc == newParcelle.Id_parc).FirstOrDefault();

            int newIndex = Exploitation.Parcelles.IndexOf(parcelle);
            Exploitation.Parcelles.Remove(parcelle);

            Exploitation.Parcelles.Add(newParcelle);
            int oldIndex = Exploitation.Parcelles.IndexOf(newParcelle);

            Exploitation.Parcelles.Move(oldIndex, newIndex);

            GetConnection().UpdateParcelle(newParcelle);
            GetConnection().UpdateExploitation(Exploitation);

            OnPropertyChanged();
        }
        private void OnParcelleDelete(ParcelleEditViewModel source, Parcelle newParcelle)
        {
            var parcelle = Exploitation.Parcelles.Where(X => X.Id_parc == newParcelle.Id_parc).FirstOrDefault();
            Exploitation.Parcelles.Remove(parcelle);
            GetConnection().UpdateExploitation(Exploitation);
            OnPropertyChanged();
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public INavigation Navigation
        {
            get { return navigation; }
            set { navigation = value; }
        }

        private static Database GetConnection()
        {
            if (database == null)
                database = new Database();
            return database;
        }
    }
}
