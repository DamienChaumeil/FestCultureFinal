using AppGestCulture.Models;
using AppGestCulture.Views;
using AppGestCulture.Data;
using Microsoft.Maui;
using Microsoft.Maui.Controls;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using Android.Util;
using Microsoft.Maui.ApplicationModel.Communication;
using static Android.Provider.CalendarContract;
using static Android.Icu.Text.CaseMap;
using static Android.Content.ClipData;
using Bumptech.Glide.Signature;
using Newtonsoft.Json;

namespace AppGestCulture.ViewModels
{
    public class ExploitationViewModel
    {
        public ObservableCollection<Exploitation> obExploitation { get; private set; } = new ObservableCollection<Exploitation>();

        private Exploitation _selectedExploitation;

        private static Database database = null;
        public ICommand btnAddExploitation { get; set; }
        public ICommand btnSendData { get; set; }
        public ICommand btnRefreshCommand { get; set; }
        public ICommand SelectExploitationCommand { get; private set; }

        private INavigation navigation;
        private bool _isDataLoaded;
        public INavigation Navigation
        {
            get { return navigation; }
            set { navigation = value; }
        }
        private static Database GetConnection()
        {
            if (database == null)
                database = new Database();
            return database;
        }
        public Exploitation SelectedExploitation
        {
            get { return _selectedExploitation; }
            set { _selectedExploitation = value; }
        }

        public ExploitationViewModel(INavigation _navigation)
        {
            navigation = _navigation;
            btnAddExploitation = new Command(async () => await addExploitation());
            btnRefreshCommand = new Command(async () => await UpdateExploitationAsync());
            btnSendData = new Command(async () => await SendDataAsync());
            SelectExploitationCommand = new Command<Exploitation>(async e => await SelectExploitation(e));

            MessagingCenter.Subscribe<ExploitationEditViewModel, Exploitation>(this, "DeleteExploitation", OnExploitationDelete);
            MessagingCenter.Subscribe<ExploitationSaisieViewModel, Exploitation>(this, "AddExploitation", OnExploitationAdd);
            MessagingCenter.Subscribe<ExploitationEditViewModel, Exploitation>(this, "UpdateExploitation", OnExploitationUpdate);
        }

        private async Task SendDataAsync()
        {
            var listExploitation = await GetConnection().GetAllExploitation();

            var objectExploitations = new List<object>();
            foreach (var exploitation in listExploitation)
            {
                var objectParcelles = new List<object>();
                foreach (var parcelle in exploitation.Parcelles)
                {
                    var Espece = await GetConnection().GetEspece(parcelle.Id_espece);
                    objectParcelles.Add(new {
                        Code_parc = parcelle.Code_parc,
                        Espece = Espece.Nom,
                        Surface = parcelle.Surface,
                        Rendement_prev = parcelle.Rendement_prev,
                        Rendement_reel = parcelle.Rendement_reel,
                        Annee = parcelle.Annee
                    });
                }

                objectExploitations.Add(new
                {
                    Code_exploi = exploitation.Code_exploi,
                    Nom = exploitation.Nom,
                    Prenom = exploitation.Prenom,
                    Parcelles = objectParcelles
                });
            }
            var jsonData = JsonConvert.SerializeObject(new { exploitations = objectExploitations });

            var client = new HttpClient();
            client.BaseAddress = new Uri("http://192.168.1.125:80");
            
            HttpResponseMessage response = await client.PostAsync("/test", new StringContent(jsonData));

            var result = await response.Content.ReadAsStringAsync();
        }
        public async Task UpdateExploitationAsync()
        {
            if (_isDataLoaded)
                return;

            _isDataLoaded = true;
            var exploitations = await GetConnection().GetAllExploitation();

            foreach (var exploitation in exploitations)
                obExploitation.Add(exploitation);

            //obExploitation = new ObservableCollection<Exploitation>(obExploitation.Distinct());
            OnPropertyChanged();
        }

        private async Task SelectExploitation(Exploitation exploitation)
        {
            if (exploitation == null)
                return;

            _selectedExploitation = null;
            await Navigation.PushAsync(new ExploitationDetailsView(obExploitation.Where(X => X.Id_exploi == exploitation.Id_exploi).FirstOrDefault()));
        }

        private async Task addExploitation()
        {
            await Navigation.PushAsync(new ExploitationSaisieView());
        }

        private void OnExploitationDelete(ExploitationEditViewModel source, Exploitation exploitation)
        {
            obExploitation.Remove(obExploitation.Where(X => X.Id_exploi == exploitation.Id_exploi).FirstOrDefault());
            OnPropertyChanged();
        }
        private void OnExploitationAdd(ExploitationSaisieViewModel source, Exploitation exploitation)
        {
            obExploitation.Add(exploitation);
            UpdateExploitationAsync();
            OnPropertyChanged();
        }
        private void OnExploitationUpdate(ExploitationEditViewModel source, Exploitation newExploitation)
        {
            var exploitation = obExploitation.Where(X => X.Id_exploi == newExploitation.Id_exploi).FirstOrDefault();

            int newIndex = obExploitation.IndexOf(exploitation);
            obExploitation.Remove(exploitation);

            obExploitation.Add(newExploitation);
            int oldIndex = obExploitation.IndexOf(newExploitation);

            obExploitation.Move(oldIndex, newIndex);
            
            OnPropertyChanged();
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
